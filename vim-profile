#!/usr/bin/env python

from __future__ import print_function

from contextlib import contextmanager
from copy import deepcopy
from distutils.spawn import find_executable
from glob import glob
from itertools import chain
import os
from subprocess import call, check_output
import sys
from tempfile import NamedTemporaryFile
from time import sleep

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
GLOB_PROFILE_MAP = {
    'bower.json': 'frontend',
    'package.json': 'frontend',
    'app/assets': 'frontend', # Rails
    'manage.py': 'python', # Django
    'README.rst': 'python',
    'requirements.txt': 'python',
    'setup.py': 'python',
    '*.gemspec': 'ruby',
    'Gemfile': 'ruby',
    'Cargo.toml': 'rust',
}


def vim_impl(vim):
    if vim == 'nvim':
        return 'nvim'
    else:
        return 'vim'


def home_vimdir(vim):
    vim_folder = vim_impl(vim)
    cfg = os.environ.get('XDG_CONFIG_HOME', os.path.expanduser('~/.config'))
    vimdir = os.path.join(cfg, vim_folder)
    if not os.path.exists(vimdir):
        os.makedirs(vimdir)
    return vimdir


def generate_runtimepath(vim):
    common_vimdirs = [
        '$VIM/vimfiles',
        '$VIMRUNTIME',
        '{}/vimrc.d'.format(BASE_DIR),
        '$VIM/vimfiles/after',
    ]
    vimdirs = common_vimdirs
    return 'set runtimepath={}'.format(','.join(vimdirs))


def generate_vimrc(vim):
    vimrc_d_glob = os.path.join(BASE_DIR, 'vimrc.d', '*.vim')
    vimrc_d_files = [f.replace(os.path.join(BASE_DIR, ''), '')
                     for f in glob(vimrc_d_glob)]
    runtime_vimrc_d = '\n'.join(['runtime {}'.format(os.path.basename(f))
                                 for f in sorted(vimrc_d_files)])
    vimrc = u'''
runtime vimrc
{runtimepath}
{vimrc_d}
'''.format(runtimepath=generate_runtimepath(vim),
           vimrc_d=runtime_vimrc_d)
    return vimrc.encode('utf-8')


def run_cmd(cmd):
    return str(check_output(cmd, shell=True).strip())


def get_rust_src():
    sysroot = run_cmd('rustc --print sysroot')
    return os.path.join(sysroot, 'lib', 'rustlib', 'src', 'rust', 'src')

def set_rvm_libdir(environ):
    rvm_libdir = run_cmd('rvm config-get libdir')
    if 'LD_LIBRARY_PATH' in environ:
        environ['LD_LIBRARY_PATH'] += os.pathsep + rvm_libdir
    else:
        environ['LD_LIBRARY_PATH'] = rvm_libdir


def set_rust_src_path(environ):
    default_rust_src_path = get_rust_src()
    if os.path.isdir(default_rust_src_path):
        environ['RUST_SRC_PATH'] = default_rust_src_path


def set_nvim_environment(environ):
    environ['EDITOR'] = 'nvim'
    # Needed for truecolor support
    if 'TMUX' in environ:
        ncurses_version = run_cmd('reset -V').split(' ', 2)[1]
        if int(ncurses_version.split('.')[0]) < 6:
            environ['TERM'] = 'screen-256color'
        else:
            environ['TERM'] = 'tmux-256color'
    else:
        environ['TERM'] = 'xterm-256color'
    # Needed for Neovim < 0.1.5
    environ['NVIM_TUI_ENABLE_TRUE_COLOR'] = '1'
    # cursor shapes don't work with Debian Jessie's vte
    if not (find_executable('lsb_release') and
            run_cmd('lsb_release --codename --short').strip() == 'jessie'):
        environ['NVIM_TUI_ENABLE_CURSOR_SHAPE'] = '1'


@contextmanager
def generated_vimrc(vim):
    with NamedTemporaryFile() as vimrc:
        vimrc.write(generate_vimrc(vim))
        vimrc.flush()
        yield vimrc


def call_vim(vim, vimrc, vim_args, environ):
    cmd = [vim, '-u', vimrc.name] + vim_args
    if 'VIM_GDB' in environ:
        cmd = ['gdb', '--args'] + cmd
    return call(cmd, env=environ)


def run_vim(prog_name, profiles, vim_args):
    vim = prog_name[:prog_name.index('-')]
    environ = deepcopy(os.environ)
    if find_executable('rvm'):
        set_rvm_libdir(environ)
    if 'rust' in profiles and 'RUST_SRC_PATH' not in environ:
        set_rust_src_path(environ)
    if vim == 'nvim':
        set_nvim_environment(environ)
    with generated_vimrc(vim) as vimrc:
        retcode = call_vim(vim, vimrc, vim_args, environ)
        if vim.startswith('mvim'):
            # MacVim loads too slowly, the generated vimrc file is deleted
            # before it tries to load it.
            sleep(5)
        return retcode


def detect_profiles():
    return [profile for suffix, profile in GLOB_PROFILE_MAP.items()
                    if glob(os.path.join(os.path.curdir, suffix))]


def list_profiles():
    print('List of profiles:')
    for d in os.listdir(PROFILES_DIR):
        if os.path.isdir(os.path.join(PROFILES_DIR, d)) and not d.endswith(('-vim', '-nvim')):
            print('* {}'.format(d))
    return 0


def main(args):
    prog_name = args[0]
    if len(args) < 1:
        usage_msg = '''\
Usage: {} (PROFILE_NAMES | --list-profiles) \
[Vim args...]

Where PROFILE_NAMES is a comma-separated list of profiles to use.
The "common" profile is enabled by default.
'''.format(prog_name)
        print(usage_msg, file=sys.stderr)
        return 1
    prog_name = os.path.basename(prog_name)
    if len(args) > 1:
        profiles = args[1].split(',')
    else:
        profiles = detect_profiles()
    if profiles == ['--list-profiles']:
        return list_profiles()
    else:
        return run_vim(prog_name, profiles, args[2:])

if __name__ == '__main__':
    sys.exit(main(sys.argv))
