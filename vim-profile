#!/usr/bin/env python

from __future__ import print_function

from contextlib import contextmanager
from copy import deepcopy
from glob import glob
import os
from subprocess import call, check_output
import sys
from tempfile import NamedTemporaryFile
from time import sleep

BASE_DIR = os.path.dirname(os.path.abspath(__file__))


def generate_runtimepath(vim):
    common_vimdirs = [
        '$VIM/vimfiles',
        '$VIMRUNTIME',
        '{}/vimrc.d'.format(BASE_DIR),
        '$VIM/vimfiles/after',
    ]
    vimdirs = common_vimdirs
    return 'set runtimepath={}'.format(','.join(vimdirs))


def generate_vimrc(vim):
    vimrc_d_glob = os.path.join(BASE_DIR, 'vimrc.d', '*.vim')
    vimrc_d_files = [f.replace(os.path.join(BASE_DIR, ''), '')
                     for f in glob(vimrc_d_glob)]
    runtime_vimrc_d = '\n'.join(['runtime {}'.format(os.path.basename(f))
                                 for f in sorted(vimrc_d_files)])
    vimrc = u'''
runtime vimrc
{runtimepath}
{vimrc_d}
'''.format(runtimepath=generate_runtimepath(vim),
           vimrc_d=runtime_vimrc_d)
    return vimrc.encode('utf-8')


def run_cmd(cmd):
    return str(check_output(cmd, shell=True).strip())


def set_nvim_environment(environ):
    environ['EDITOR'] = 'nvim'
    # Needed for truecolor support
    if 'TMUX' in environ:
        ncurses_version = run_cmd('reset -V').split(' ', 2)[1]
        if int(ncurses_version.split('.')[0]) < 6:
            environ['TERM'] = 'screen-256color'
        else:
            environ['TERM'] = 'tmux-256color'
    else:
        environ['TERM'] = 'xterm-256color'


@contextmanager
def generated_vimrc(vim):
    with NamedTemporaryFile() as vimrc:
        vimrc.write(generate_vimrc(vim))
        vimrc.flush()
        yield vimrc


def call_vim(vim, vimrc, vim_args, environ):
    cmd = [vim, '-u', vimrc.name] + vim_args
    if 'VIM_GDB' in environ:
        cmd = ['gdb', '--args'] + cmd
    return call(cmd, env=environ)


def run_vim(prog_name, vim_args):
    vim = prog_name[:prog_name.index('-')]
    environ = deepcopy(os.environ)
    if vim == 'nvim':
        set_nvim_environment(environ)
    with generated_vimrc(vim) as vimrc:
        retcode = call_vim(vim, vimrc, vim_args, environ)
        if vim.startswith('mvim'):
            # MacVim loads too slowly, the generated vimrc file is deleted
            # before it tries to load it.
            sleep(5)
        return retcode


def main(args):
    prog_name = args[0]
    if len(args) < 1:
        usage_msg = '''\
Usage: {} [Vim args...]
'''.format(prog_name)
        print(usage_msg, file=sys.stderr)
        return 1
    prog_name = os.path.basename(prog_name)
    return run_vim(prog_name, args[1:])


if __name__ == '__main__':
    sys.exit(main(sys.argv))
