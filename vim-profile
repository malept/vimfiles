#!/usr/bin/env python

from __future__ import print_function

from copy import deepcopy
from distutils.spawn import find_executable
from glob import glob
import os
from subprocess import call, check_output
import sys
from tempfile import NamedTemporaryFile
from time import sleep

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PROFILES_DIR = os.path.join(BASE_DIR, 'profiles')


def home_vimdir(vim):
    if vim == 'nvim':
        vim_folder = 'nvim'
    else:
        vim_folder = 'vim'
    cfg = os.environ.get('XDG_CONFIG_HOME', os.path.expanduser('~/.config'))
    vimdir = os.path.join(cfg, vim_folder)
    if not os.path.exists(vimdir):
        os.makedirs(vimdir)
    return vimdir


def generate_runtimepath(profiles):
    common_vimdirs = [
        '$VIM/vimfiles',
        '$VIMRUNTIME',
        BASE_DIR,  # for vimrc.d
        '$VIM/vimfiles/after',
    ]
    profile_vimdirs = [os.path.join(PROFILES_DIR, p) for p in profiles]
    profile_after_vimdirs = [os.path.join(d, 'after') for d in profile_vimdirs]
    vimdirs = profile_vimdirs + common_vimdirs + profile_after_vimdirs
    return 'set runtimepath={}'.format(','.join(vimdirs))


def pathogen_cmds(vim, profiles):
    profile_dirs = ["'{}/bundle/{{}}'".format(os.path.join(PROFILES_DIR, p))
                    for p in profiles]
    return '''
if has("mac")
  set nocp
endif
runtime vim/bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect({profile_dirs})
set runtimepath^={home_vimdir}
Helptags
'''.format(home_vimdir=home_vimdir(vim),
           profile_dirs=','.join(profile_dirs)).strip()


def generate_vimrc(vim, profiles):
    common = ['common']
    if vim == 'nvim':
        common.append('common-nvim')
    else:
        common.append('common-vim')
    profiles = common + profiles
    vimrc_d_glob = os.path.join(BASE_DIR, 'vimrc.d', '*.vim')
    vimrc_d_files = [f.replace(os.path.join(BASE_DIR, ''), '')
                     for f in glob(vimrc_d_glob) if '001-pathogen' not in f]
    runtime_vimrc_d = '\n'.join(['runtime {}'.format(f)
                                 for f in sorted(vimrc_d_files)])
    vimrc = u'''
runtime vimrc
{runtimepath}
{pathogen}
{vimrc_d}
'''.format(runtimepath=generate_runtimepath(profiles),
           pathogen=pathogen_cmds(vim, profiles),
           vimrc_d=runtime_vimrc_d)
    return vimrc.encode('utf-8')


def run_cmd(cmd):
    return str(check_output(cmd, shell=True).strip())


def get_rvm_libdir():
    return run_cmd('rvm config-get libdir')


def get_rust_src():
    return os.path.join(run_cmd('rustc --print sysroot'), 'lib', 'rustlib',
                        'src', 'rust', 'src')


def run_vim(prog_name, profiles, vim_args):
    vim = prog_name[:prog_name.index('-')]
    environ = deepcopy(os.environ)
    if find_executable('rvm'):
        rvm_libdir = get_rvm_libdir()
        if 'LD_LIBRARY_PATH' in environ:
            environ['LD_LIBRARY_PATH'] += os.pathsep + rvm_libdir
        else:
            environ['LD_LIBRARY_PATH'] = rvm_libdir
    if 'rust' in profiles and 'RUST_SRC_PATH' not in environ:
        default_rust_src_path = get_rust_src()
        if os.path.isdir(default_rust_src_path):
            environ['RUST_SRC_PATH'] = default_rust_src_path
    if vim == 'nvim':
        environ['EDITOR'] = 'nvim'
        # Needed for truecolor support
        environ['TERM'] = 'xterm-256color'
        ## Needed for Neovim < 0.1.5
        environ['NVIM_TUI_ENABLE_TRUE_COLOR'] = '1'
    with NamedTemporaryFile() as f:
        f.write(generate_vimrc(vim, profiles))
        f.flush()
        cmd = [vim, '-u', f.name] + vim_args
        ret = call(cmd, env=environ)
        if vim.startswith('mvim'):
            # MacVim loads too slowly, the generated vimrc file is deleted
            # before it tries to load it.
            sleep(5)
        return ret


def list_profiles():
    print('List of profiles (common and common-{vim,nvim} are default):')
    for d in os.listdir(PROFILES_DIR):
        if os.path.isdir(os.path.join(PROFILES_DIR, d)) and not d.endswith(('-vim', '-nvim')):
            print('* {}'.format(d))
    return 0


def list_profileless_bundles():
    bundle_dir = os.path.join(BASE_DIR, 'vim', 'bundle')
    all_bundles = [d for d in os.listdir(bundle_dir)
                   if os.path.isdir(os.path.join(bundle_dir, d))]
    profile_glob = os.path.join(PROFILES_DIR, '*', 'bundle', '*')
    bundles_in_profiles = [os.path.basename(l) for l in glob(profile_glob)
                           if os.path.islink(l)]
    profileless_bundles = sorted(set(all_bundles) - set(bundles_in_profiles))
    if len(profileless_bundles) > 0:
        print('List of bundles not in any profile:')
        [print('* {}'.format(b)) for b in profileless_bundles]
    else:
        print('All bundles are in at least one profile.')
    return 0


def main(args):
    prog_name = args[0]
    if len(args) < 1:
        usage_msg = '''\
Usage: {} (PROFILE_NAMES | --list-profiles | --list-profileless-bundles) \
[Vim args...]

Where PROFILE_NAMES is a comma-separated list of profiles to use.
The "common" profile is enabled by default.
'''.format(prog_name)
        print(usage_msg, file=sys.stderr)
        return 1
    prog_name = os.path.basename(prog_name)
    if len(args) > 1:
        profiles = args[1].split(',')
    else:
        profiles = []
    if profiles == ['--list-profiles']:
        return list_profiles()
    elif profiles == ['--list-profileless-bundles']:
        return list_profileless_bundles()
    else:
        return run_vim(prog_name, profiles, args[2:])

if __name__ == '__main__':
    sys.exit(main(sys.argv))
